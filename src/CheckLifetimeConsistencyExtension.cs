using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;

namespace Microsoft.Extensions.DependencyInjection;

public static class CheckLifetimeConsistencyExtension
{
    private readonly static string[] _NameSpacesToIgnore = new string[] { "Microsoft", "System" };

    /// <summary>
    /// Throw an exception if any Scoped or Transient service is directly used in a Singleton service.
    /// </summary>
    /// <param name="services">Services to check</param>
    /// <param name="ignoreMicrosoftInternalErrors">Allow to ignore errors generated by services in the Microsoft or System namespace</param>
    public static void CheckLifetimeConsistency(this IServiceCollection services, bool ignoreMicrosoftInternalErrors = false)
    {
        if (services == null)
            throw new ArgumentNullException(nameof(services), $"{nameof(services)} is null.");

        static Type GetServiceType(ServiceDescriptor serviceDescriptor) =>
                serviceDescriptor.ImplementationType ??
                serviceDescriptor.ImplementationInstance?.GetType();

        IEnumerable<ServiceLifetime> GetLifeTimes(ParameterInfo dependency) => services.Where(s => s.ServiceType == dependency.ParameterType).Select(s => s.Lifetime);

        var inconsistentServices = (from serviceDescriptor in services
                                    where serviceDescriptor.Lifetime == ServiceLifetime.Singleton
                                    from constructor in GetServiceType(serviceDescriptor)?.GetConstructors() ?? Enumerable.Empty<ConstructorInfo>()
                                    where constructor != null
                                    from dependency in constructor.GetParameters()
                                    where dependency != null
                                    from dependencyLifetime in GetLifeTimes(dependency)
                                    where dependencyLifetime != ServiceLifetime.Singleton
                                    select new InconsistentService
                                    {
                                        CallingServiceType = serviceDescriptor.ImplementationType,
                                        CallingServiceLifeTime = serviceDescriptor.Lifetime,
                                        ServiceType = dependency.ParameterType,
                                        ServiceLifeTime = dependencyLifetime
                                    }).ToArray();

        if (inconsistentServices.Length == 0)
            return;

        if (ignoreMicrosoftInternalErrors)
        {
            foreach (string nameSpaceToIgnore in _NameSpacesToIgnore)
            {
                inconsistentServices = inconsistentServices.Where(s =>
                    (s.CallingServiceType?.Namespace == null || !s.CallingServiceType.Namespace.StartsWith(nameSpaceToIgnore))
                    && (s.ServiceType?.Namespace == null || !s.ServiceType.Namespace.StartsWith(nameSpaceToIgnore))
                    ).ToArray();
            }
        }

        if (inconsistentServices.Length == 0)
            return;

        throw new InconsistentServicesException(inconsistentServices);
    }
}
